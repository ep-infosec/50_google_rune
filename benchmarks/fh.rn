//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Root(self) {
}

class Element(self, name, cost) {
  // println "Creating element with cost ", cost
  self.cost = cost
  self.name = name
  root.appendElement(self)

  operator < (element1: Element, element2: Element) {
    return element1.cost < element2.cost
  }
}

relation DoublyLinked Root Element cascade
relation HeapqList Root:"Heap" Element:"Heap" cascade

func hashValues(val1, val2) {
  return (0xdeadbeefu32*val1) ^ val2
}

root = Root()
cost = 1u32
for i in range(1u32 << 10) {
  cost = hashValues(cost, i)
  Element("foo" + i.toString(), cost)
}

for i in range(10u32) {
  for element in root.elements() {
    root.pushHeapElement(element)
  }
  totalHash = 0u32
  do {
    element = root.popHeapElement()
  } while !isnull(element) {
    totalHash = hashValues(totalHash, element.cost)
  }
  println totalHash
}
