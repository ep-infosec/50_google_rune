//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import math

func evalA(i: u64, j: u64) {
  return <f64>((i + j)*(i + j + 1)/2 + i + 1)
}

func Times(var v: [f64], var u: [f64]) {
  for i = 0, i < v.length(), i += 1 {
    v[i] = 0.0f64
    for j = 0, j < u.length(), j += 1 {
      v[i] += u[j] / evalA(i, j)
    }
  }
}

func TimesTransp(var v: [f64], var u: [f64]) {
  for i = 0, i < v.length(), i += 1 {
    v[i] = 0.0f64
    for j = 0, j < u.length(), j += 1 {
      v[i] += u[j] / evalA(j, i)
    }
  }
}

func ATimesTransp(var v: [f64], var u: [f64]) {
  x = arrayof(f64).resize(u.length())
  Times(x, u)
  TimesTransp(v, x)
}

func main() {
  // For testing purposes only
  N = 10
  u = arrayof(f64).resize(N)
  for i = 0, i < N, i += 1 {
    u[i] = 1.0f64
  }
  v = arrayof(f64).resize(N)
  for i = 0, i < N, i += 1 {
    ATimesTransp(v, u)
    ATimesTransp(u, v)
  }

  vBv = 0.0f64
  vv = 0.0f64
  for i = 0, i < N, i += 1 {
    vBv += u[i] * v[i]
    vv += v[i] * v[i]
  }
  println math.sqrt(vBv/vv)
}

main()
