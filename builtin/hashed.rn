//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Hash together two values
func hashValues(val1: u64, val2: u64) -> u64 {
  return ((val1 ^ <val1>0xdeadbeef31415927u64) >>> 23) !* val2
}

// Hash a string.
func hashString(value: string) -> u64 {
  hash = 0u64
  for i = 0, i < value.length(), i += 1 {
    hash = hashValues(hash, <u64>value[i])
  }
  return hash
}

// Hash an integer of any size.
func hashInteger(value: Uint | Int) -> u64 {
  typeswitch value {
    case u1 ... u64 | i1 ... i64 {
      return hashValues(0u64, <u64>value)
    }
    default {
      remaining = value
      hash = 0u64
      do {
        hash = hashValues(hash, !<u64>remaining)
        remaining >>= 64
      } while remaining != <remaining>0
      return hash
    }
  }
}

func hashValue(value) -> u64 {
  // Only one of these cases will be instatiated per func instantiation.
  typeswitch value {
    case String {
      return hashString(value)
    }
    case Uint, Int {
      return hashInteger(value)
    }
    case Array {
      hash = 0u64
      for i in range(value.length) {
        element = value[i]
        hash = hashValues(hash, hashValue(element))
      }
      return hash
    }
    case Class {
      // The hash value is just the object index itself.
      return <u64><u32>value
    }
    default {
      error = 0  // This will cause a ccompile-time error.
      error = "hashValue: I don't know how to hash this type"
    }
  }
}

generator Hashed(A: Class, B: Class, cascadeDelete: bool = false,
    labelA: string = "", labelB: string = "", keyField: string = "hash", pluralB: string = "") {
  if pluralB == "" {
    pluralB = "$B_s";
  }
  prependcode A {
    self.$labelB$B_Table = arrayof(B)
    self.num$labelB$pluralB = 0

    func find$labelB$B(self, key) {
      if self.$labelB$B_Table.length() == 0 {
        return null(self.$labelB$B_Table[u64])
      }
      hash = hashValue(key) & <u64>(self.$labelB$B_Table.length() - 1)
      entry = self.$labelB$B_Table[hash]
      while !isnull(entry) {
        if key == entry.$keyField {
          return entry
        }
        entry = entry.nextHashed$A$labelB$B
      }
      return null(entry)
    }

    func insert$labelB$B(self, entry) {
      func updateHashTableAfterResize(self) {
        // Move ojbects that have their high next higher bit forward by the old table length.
        for i in range(0, self.num$labelB$pluralB) {
          entry = self.$labelB$B_Table[i]
          prevEntry = null(entry)
          newLength = self.$labelB$B_Table.length()
          mask = <u64>(newLength - 1)
          while !isnull(entry) {
            hash = hashValue(entry.$keyField) & mask
            if hash >> (newLength - 2) != 0 {
              nextEntry = entry.nextHashed$A$labelB$B
              // Remove entry.
              if isnull(prevEntry) {
                self.$labelB$B_Table[i] = nextEntry
              } else {
                prevEntry.nextHashed$A$labelB$B = nextEntry
              }
              // Insert entry.
              entry.nextHashed$A$labelB$B = self.$labelB$B_Table[hash]
              self.$labelB$B_Table[hash] = entry
            }
            prevEntry = entry
            entry = nextEntry
          }
        }
      }

      if self.num$labelB$pluralB == self.$labelB$B_Table.length() {
        if self.$labelB$B_Table.length() == 0 {
          self.$labelB$B_Table.resize(1)
        } else {
          // Double the size of the hash table.
          self.$labelB$B_Table.resize(self.$labelB$B_Table.length() << 1)
        }
        for i in range(self.num$labelB$pluralB, self.$labelB$B_Table.length()) {
          self.$labelB$B_Table[i] = null(entry)
        }
        updateHashTableAfterResize(self)
      }
      hash = hashValue(entry.$keyField) & <u64>(self.$labelB$B_Table.length() - 1)
      prevEntry = self.$labelB$B_Table[hash]
      entry.nextHashed$A$labelB$B = prevEntry
      self.$labelB$B_Table[hash] = entry
      self.num$labelB$pluralB += 1
      entry.$labelA$A = self
      ref entry
    }

    func remove$labelB$B(self, child) {
      hash = hashValue(child.$keyField) & <u64>(self.$labelB$B_Table.length() - 1)
      entry = self.$labelB$B_Table[hash]
      prev = null(entry)
      while !isnull(entry) {
        if entry == child {
          if isnull(prev) {
            self.$labelB$B_Table[hash] = child.nextHashed$A$labelB$B
          } else {
            prev.nextHashed$A$labelB$B = child.nextHashed$A$labelB$B
          }
          child.nextHashed$A$labelB$B = null(child)
          child.$labelA$A = null(self)
          unref child
          return
        }
        prev = entry
        entry = entry.nextHashed$A$labelB$B
      }
      throw "Entry not found in map"
    }

    iterator $labelB$pluralB(self) {
      for i in range(self.$labelB$B_Table.length()) {
        entry = self.$labelB$B_Table[i]
        while !isnull(entry) {
          yield entry!
          entry = entry.nextHashed$A$labelB$B
        }
      }
    }

    iterator safe$labelB$pluralB(self) {
      for i in range(self.$labelB$B_Table.length()) {
        entry = self.$labelB$B_Table[i]
        while !isnull(entry) {
          nextEntry = entry.nextHashed$A$labelB$B
          yield entry!
          entry = nextEntry
        }
      }
    }
  }

  if cascadeDelete {
    // If this is a cascade-delete relationship, destroy children in
    // the destructor.
    appendcode A.destroy {
      for x$labelB$B in range(self.$labelB$B_Table.length()) {
        $labelB$B_Entry = self.$labelB$B_Table[x$labelB$B]
        while !isnull($labelB$B_Entry) {
          next$labelB$B_Entry = $labelB$B_Entry.nextHashed$A$labelB$B
          $labelB$B_Entry.nextHashed$A$labelB$B = null($labelB$B_Entry)
          $labelB$B_Entry.$labelA$A = null(self)
          $labelB$B_Entry.destroy()
          $labelB$B_Entry = next$labelB$B_Entry
        }
        self.$labelB$B_Table[x$labelB$B] = null($labelB$B_Entry)
      }
    }
  } else {
    appendcode A.destroy {
      for x$labelB$B in range(self.$labelB$B_Table.length()) {
        $labelB$B_Entry = self.$labelB$B_Table[x$labelB$B]
        while !isnull($labelB$B_Entry) {
          next$labelB$B_Entry = $labelB$B_Entry.nextHashed$A$labelB$B
          $labelB$B_Entry.nextHashed$A$labelB$B = null($labelB$B_Entry)
          $labelB$B_Entry.$labelA$A = null(self)
          $labelB$B_Entry = next$labelB$B_Entry
        }
        self.$labelB$B_Table[x$labelB$B] = null($labelB$B_Entry)
      }
    }
  }

  prependcode B {
    self.$labelA$A = null(A)
    self.nextHashed$A$labelB$B = null(self)
  }
  // Remove self from A on destruction.
  appendcode B.destroy {
    if !isnull(self.$labelA$A) {
      self.$labelA$A.remove$labelB$B(self)
    }
  }
}
