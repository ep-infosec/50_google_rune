//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Heapq(self, <valueType>) {

  class Element(self, heapq: typeof(Heapq(value)), <value>) {
    self.value = value
    heapq.pushElement(self)

    operator < (element1: Heapq.Element, element2: Heapq.Element) {
      return element1.value < element2.value
    }
  }

  func push(self, value) {
     Heapq.Element(self, value)
  }

  func pop(self) {
    element = self.popElement()
    if isnull(element) {
      throw "Heapq underflow"
    }
    return element.value
  }

  func empty(self) {
    return self.elements.length() == 0
  }

  func length(self) {
    return self.elements.length()
  }

  func clear(self) {
    while !isnull(Elements.pop()) {
    }
  }
}

relation HeapqList Heapq Heapq.Element cascade
