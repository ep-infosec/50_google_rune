//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

generator OneToOne(A: Class, B: Class, cascadeDelete:bool = false,
    labelA: string = "", labelB: string = "") {
  prependcode A {
    self.$labelB$B = null(B)

    func insert$labelB$B(self, child: B) {
      debug {
        if !isnull(child.$labelA$A) {
          throw "insert$labelB$B: Object is already in a relation"
        }
      }
      self.$labelB$B = child
      child.$labelA$A = self
      ref child
    }

    func remove$labelB$B(self, child: B) {
      debug {
        if child.$labelA$A != self {
          throw "remove$labelB$B: Object not owned by me"
        }
      }
      self.$labelB$B = null(child)
      child.$labelA$A = null(self)
      unref child
    }
  }

  if cascadeDelete {
    // If this is a cascade-delete relationship, destroy children in the destructor.
    appendcode A.destroy {
      child$labelB$B = self.$labelB$B
      if !isnull(child$labelB$B) {
        child$labelB$B.destroy()
      }
    }
  } else {
    prependcode A.destroy {
      child$labelB$B = self.$labelB$B
      if !isnull(child$labelB$B) {
        self.remove$labelB$B(child$labelB$B)
      }
    }
  }

  prependcode B {
    self.$labelA$A = null(A)
  }

  // Remove self from A on destruction.
  prependcode B.destroy {
    if !isnull(self.$labelA$A) {
      self.$labelA$A.remove$labelB$B(self)
    }
  }
}
