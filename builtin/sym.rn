//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Add a symbol table class to encourage folks to do less string processing.

class Symtab(self) {
}

class Symbin(self, hash: u64) {
  self.hash = hash
  theSymbolTable.insertSymbin(self)

  func findSym(self, name: string) -> Sym? {
    for sym in self.syms() {
      if sym.name == name {
        return sym
      }
    }
    return null(Sym(Symbin(u64), string))
  }
}

// Do not call this constructor directly!  Instead call Sym.new.
// TODO: Enhance Rune to make it possible to avoid the factory function here.
class Sym(self, symbin: Symbin, name: string) {
  self.name = name
  self.hash = symbin.hash
  symbin.insertSym(self)

  func new(name: string) -> Sym {
    hash = hashString(name)
    symbin = theSymbolTable.findSymbin(hash)
    if isnull(symbin) {
      symbin = Symbin(hash)
    }
    sym = symbin.findSym(name)
    if !isnull(sym) {
      return sym!
    }
    return Sym(symbin!, name)
  }
}

relation Hashed Symtab Symbin cascade ("hash")
relation LinkedList Symbin Sym cascade

theSymbolTable = Symtab()
if false {
  // TODO: Somehow fix binding so we don't need hacks like this.  This hack
  // tells the binding code what a constructed Sym looks like.
  Sym(Symbin(0u64), "")
}
