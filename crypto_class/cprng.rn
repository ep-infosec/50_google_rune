//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use sponge  // The sponge class.

class CPRNG(self, seed: string) {
  self.sponge = Sponge()
  self.sponge.absorb(seed)

  func squeeze(self, numBytes: Uint) -> string {
    // This makes it hard for an attacker to guess the state of the CPRNG prior to this call.
    // BSD had this flaw, and attackers who gained access to the state of the urandom CPRNG
    // could guess not only future secret keys, but past keys as well.
    // https://ftp.netbsd.org/pub/NetBSD/security/advisories/NetBSD-SA2019-005.txt.asc
    self.sponge.absorb(self.sponge.squeeze(32))
    return self.sponge.squeeze(numBytes)
  }

  // A CPRNG should be reseeded occasionally, so that an attacker who knows a
  // past state of the CPRNG will not be able to guess future states.
  // Reseeding should be done with a seed too hard for an attacker to guess.
  // E.g. if seed is always 1 random byte, the attacker can guess the value of
  // seed based on the next public key they see generated.
  func reseed(self, seed: string) {
    self.sponge.absorb(seed)
  }
}
