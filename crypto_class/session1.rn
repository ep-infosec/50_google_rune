//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use prp

plaintext = secret("Pedantic pterodactyls can write correct crypto.")
password = secret("Never use 'password' as your password!")
ciphertext = encrypt(password, plaintext)
recoveredPlaintext = reveal(decrypt(password, ciphertext))
println "plaintext = ", recoveredPlaintext

// Encrypt the 1-block plaintext with P XOR permute(M XOR P).
func encrypt(password: string, plaintext: string) -> string {
  M = plaintext.toUintLE(u512)  // Convert a short string to a 512-bit integer.
  P = password.toUintLE(u512)
  M ^= P  // XOR P into M.
  permute(M)
  M ^= P  // XOR P onto M.
  return M.toStringLE()  // Convert 512-bit integer back to a string.
}

func decrypt(password: string, ciphertext: string) -> string {
  M = ciphertext.toUintLE(u512)
  P = password.toUintLE(u512)
  M ^= P  // XOR P into M.
  inversePermute(M)
  M ^= P  // XOR P into M.
  return M.toStringLE()
}
