//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Node(self, parent, value) {
  self.value = value
  self.markedValue = 0.0f32
  self.unmarkedValue = 0.0f32
  if !isnull(parent) {
    parent.appendNode(self)
  }

  func markNodes(self) {
    totalMarked = self.value
    totalUnmarked = 0.0f32
    for child in self.nodes() {
      child.markNodes()
      totalUnmarked += max(child.markedValue, child.unmarkedValue)
      totalMarked += child.unmarkedValue
    }
    self.unmarkedValue = totalUnmarked
    self.markedValue = totalMarked
  }
}

relation DoublyLinked Node Node cascade

root = Node(null(Node), 123.0f32)
node1 = Node(root, 23.0f32)
node2 = Node(root, 32.0f32)
node3 = Node(node2, 32.0f32)
root.markNodes()
println "Total = ", max(root.markedValue, root.unmarkedValue)
