//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Point(self, <x>, <y>) {
    self.x = x
    self.y = y
}

class Complex(self, <x>, <y>) {
    self.x = x
    self.y = y
}

func  manhattanDistance(object) {
    return abs(object.x) + abs(object.y)
}

func magnitude(object) {
    return object.x**2 + object.y**2
}

func arraySum(array, distancefunc) {
    t = typeof(distancefunc(array[0]))
    total = <t>0  // Cast 0 to type of the result.
    for i = 0, i < array.length(), i += 1 {
        total += distancefunc(array[i])
    }
    return total
}

func printArrayTotalDistance(array) {
    if useManhattan {
        println "Using manhattan distance."
        distancefunc = &manhattanDistance(array[0])
    } else {
        println "Using magnitude distance."
        distancefunc = &magnitude(array[0])
    }
    // All three calls should result in only 1 instatiated func.
    // The datatype is simply funcptr, so the signatures match.
    println arraySum(array, distancefunc)
}

useManhattan = true
pointArray = [Point(3u32, 5u32), Point(48u32, 183u32)]
printArrayTotalDistance(pointArray)
complexArray = [Complex(1i8, -4i8), Complex(1i8, 2i8), Complex(3i8, -1i8)]
useManhattan = !useManhattan
printArrayTotalDistance(complexArray)
