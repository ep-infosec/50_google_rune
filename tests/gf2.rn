//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

func gf2Mod(a, m) {
  a2 = a
  m2 = m
  i = 0
  while m2 < a2 {
    m2 <<= 1
    i += 1
  }
  while i > 0 {
    anew = a2 ^ m2
    if anew < a2 {
      a2 = anew
    }
    m2 >>= 1
    i -= 1
  }
  anew = a2 ^ m2
  if anew < a2 {
    a2 = anew
  }
  return a2
}

func exteuc(a, b) {
  signedA = signed(a)
  signedB = signed(b)
  arow = [signedA, <signedA>1, <signedA>0]
  brow = [signedB, <signedB>0, <signedB>1]

  do {
    q = arow[0] / brow[0]
    r = arow[0] - q*brow[0]
  } while r != <r>0 {
    r1 = arow[1]-q*brow[1]
    r2 = arow[2]-q*brow[2]
    arow = brow
    brow = [r, r1, r2]
  }

  return brow
}

func gf2BitLength(a) {
  if a == 0 {
    return <widthof(a)>0
  }
  n = <widthof(a)>1
  while n < widthof(a) && (a >> n) > 0 && (a >> n) < a {
    n <<= 1
  }
  n >>= 1
  b = n
  while b > 0 {
    b >>= 1
    nnew = n ^ b
    if nnew < widthof(a) && (a >> nnew) > 0 {
      n = nnew
    }
  }
  return n + 1
}

func gf2ModVect(avec, dvec) {
  //println "gf2ModVect(%[u], %[u])" % (avec, dvec)
  na = gf2BitLength(avec[0])
  nd = gf2BitLength(dvec[0])
  if na < nd {
    return avec
  }
  i = na - nd
  println "i = %u, na = %u, nd = %u" % (i, na, nd)
  test = (<avec[0]>1 << (na-1))
  println "test = 0x%x" % test
  a0 = avec[0]
  a1 = avec[1]
  a2 = avec[2]
  while i > 0 {
    println "i = %u, a0 = %u, a1 = %u, a2 = %u, test = 0x%x" % (i, a0, a1, a2, test)
    if (a0 & test) != 0 {
      // avec = [a ** (d << i) for (a,d) in zip(avec,dvec)]
      a0 = a0 ^ (dvec[0] << i)
      a1 = a1 ^ (dvec[1] << i)
      a2 = a2 ^ (dvec[2] << i)
    }
    i -= 1
    test >>= 1
  }
  println "i = 0, a0 = %u, a1 = %u, a2 = %u, test = 0x%x" % (a0, a1, a2, test)
  if (a0 & test) != 0 {
    // avec = [a ** (d << i) for (a,d) in zip(avec,dvec)]
    a0 = a0 ^ (dvec[0] << i)
    a1 = a1 ^ (dvec[1] << i)
    a2 = a2 ^ (dvec[2] << i)
  }
  println "i = 0, a0 = %u, a1 = %u, a2 = %u, test = 0x%x" % (a0, a1, a2, test)
  println "exit gf2ModVect() = %[u]" % [a0, a1, a2]
  return (a0, a1, a2)
}

func gf2exteuc(a, b) {
  println "gf2exteuc(%u, %u)" % (a, b)
  arow = (a, <a>1, <a>0)
  brow = (b, <b>0, <b>1)

  do {
    rrow = <arow>gf2ModVect(arow, brow)
    println "gf2ModVect(arow, brow) = ", gf2ModVect(arow, brow)
    println "rrow = ", rrow
  } while rrow[0] != 0 {
    arow = brow
    brow = rrow
  }
  println "exit gf2exteuc"
  return brow
}

func gf2Add(a, b) {
  return a ^ b
}

func gf2Sub(a, b) {
  return a ^ b
}

func gf2Mul(a, b) {
  locala = a
  localb = b
  c = <a>0
  while locala > 0 {
    if (locala & 1) != 0 {
      c ^= localb
    }
    localb <<= 1
    locala >>= 1
  }
  return c
}

func gf2MulMod(a, b, m) {
  locala = a
  localb = b
  c = <b>0
  while locala > 0 {
    if (locala & 1) != 0 {
      c ^= localb
    }
    localb <<= 1
    b2 = localb ^ m
    if b2 < localb {
      localb = b2
    }
    locala >>= 1
  }
  return c
}

func gf2Pow(a, b) {
  locala = a
  localb = b
  c = <a>1
  while localb > 0 {
    if (localb & 1) != 0 {
      c = gf2Mul(c, locala)
    }
    locala = gf2Mul(locala, locala)
    localb >>= 1
  }
  return c
}

func gf2PowMod(a, b, m) {
  locala = a
  localb = b
  if localb < 0 {
    locala = gf2Inv(a, m)
    localb = - localb
  }
  c = <a>1
  while localb > 0 {
    if (localb & 1) != 0 {
      c = gf2MulMod(c, locala, m)
    }
    locala = gf2MulMod(locala, locala, m)
    localb >>= 1
  }
  return c
}

func gf2Gcd(a, m) {
  return gf2exteuc(a, m)[0]
}

func gf2Inv(a, m) {
  eec = gf2exteuc(a, m)
  assert eec[0] == 1, "0x%x and 0x%x are not relatively prime but have a common factor of 0x%x" % (a,m,eec[0])
  return eec[1]
}

func gf2Div(a, b, m) {
  return gf2MulMod(a, gf2Inv(b, m), m)
}

func checkIrreduciblePolynomialRabin(poly, size) {
  // Uses Rabin's test of irreducibility to check if a GF2 element is irreducible.
  println "<poly>0x2 = %u, 2**(size / 2) = %u, poly = %u" % (<poly>0x2, 2**(size / 2), poly)
  h = gf2PowMod(<poly>0x2, 2**(size / 2), poly)
  println "h = %u" % h
  println "gf2Gcd(poly, h ^ 0x2) = %u" % gf2Gcd(poly, h ^ 0x2)
  if h ^ 0x2 == 0 || gf2Gcd(poly, h ^ 0x2) != 1 {
    return false
  }
  h = gf2PowMod(<poly>0x2, 2**size, poly)
  if gf2Mod(h, poly) != 0x2 {
    return false
  }
  return true
}

func makePoly(coef, type) {
  res = <type>0
  for i = 0, i < coef.length(), i += 1 {
    res |= <type>1 << <type>coef[i]
  }
  return res
}

func ☃exteuc(a, b) {
  eec = exteuc(a, b)
  println eec
  assert eec[0] == (eec[1] * signed(a)) + (eec[2] * signed(b))
}

func ☃gf2exteuc(a, b) {
  eec = gf2exteuc(a, b)
  println eec
  assert eec[0] == gf2Add(gf2Mul(eec[1], a), gf2Mul(eec[2], b))
}

func ☃gf2Inv(a, m) {
  assert gf2Inv(gf2Inv(a, m), m) == a
  assert gf2MulMod(a, gf2Inv(a, m), m) == 1
  assert gf2MulMod(gf2Inv(a, m), a, m) == 1
}

func ☃gf2Div(a, b, m) {
  assert gf2MulMod(gf2Div(a, b, m), b, m) == a
  assert gf2MulMod(b, gf2Div(a, b, m), m) == a
}

func ☃fieldTest(a, b, c, m) {
  // Associativity
  assert gf2Add(a, gf2Add(b, c)) == gf2Add(gf2Add(a, b), c)
  assert gf2Mul(a, gf2Mul(b, c)) == gf2Mul(gf2Mul(a, b), c)
  assert gf2MulMod(a, gf2MulMod(b, c, m), m) == gf2MulMod(gf2MulMod(a, b, m), c, m)

  // Commutativity
  assert gf2Add(a, b) == gf2Add(b, a)
  assert gf2Mul(a, b) == gf2Mul(b, a)
  assert gf2MulMod(a, b, m) == gf2MulMod(b, a, m)

  // Identity
  assert gf2Add(a, <a>0) == a
  assert gf2Mul(a, <a>1) == a
  assert gf2MulMod(a, <a>1, m) == a

  // Inverse
  assert gf2Add(a, a) == 0
  assert gf2MulMod(a, gf2Inv(a, m), m) == 1

  // Distributivity
  assert gf2Mul(a, gf2Add(b, c)) == gf2Add(gf2Mul(a, b), gf2Mul(a, c))
  assert gf2MulMod(a, gf2Add(b, c), m) == gf2Add(gf2MulMod(a, b, m), gf2MulMod(a, c, m))
}


☃exteuc(5, 99)
☃exteuc(50, 105)

println "0x%x" % gf2Mod(2u32, 0x11Bu32)
println "0x%x" % gf2Mod(0x119u32, 0x11Bu32)

println "0x%x" % gf2Add(0x100u32, 0x1u32)

println "0x%x" % gf2MulMod(2u32, 2u32, 0x11Bu32)


println "0x%x" % gf2Pow(2u32, 4u32)
println "0x%x" % gf2PowMod(2u17, 9u17, 0x11Bu17)
println "0x%x" % gf2PowMod(3u17, 2**16u17-1, 0x11Bu17)
println "0x%x" % gf2PowMod(2u17, -2i17, 0x11Bu17)

assert gf2BitLength(2u32) == 2u32
assert gf2BitLength(1u32 << 5) == 6u32
assert gf2BitLength(1u32 << 30) == 31u32
assert gf2BitLength(1u256 << 200) == 201u32

☃gf2exteuc(0x119u32, 0x11Bu32)
☃gf2exteuc(2u32, 0x11Bu32)

print "gf2BitLength = %u" % gf2BitLength(65579u17)
☃gf2exteuc(0x1002Bu17, 0x50F2u17)

inv = gf2Inv(2u32, 0x11Bu32)
println inv
assert inv == 0x8D

☃gf2Inv(2u32, 0x11Bu32)

☃gf2Div(0x29u32, 2u32, 0x11Bu32)

☃fieldTest(0x13u17, 0x54u17, 0x7Eu17, 0x11Bu17)

println "0x%x" % makePoly([8, 4, 3, 1, 0], 0)

println gf2exteuc(18446744073709551643u65, 6656922126492271879u65)

/*
assert checkIrreduciblePolynomialRabin(0x11Bu17, 8)
assert checkIrreduciblePolynomialRabin(0x1002Bu17, 16)
assert checkIrreduciblePolynomialRabin(makePoly([32, 7, 3, 2, 0], 0u64), 32)
*/
//assert checkIrreduciblePolynomialRabin(makePoly([64, 4, 3, 1, 0], 0u65), 64)

//assert checkIrreduciblePolynomialRabin(makePoly([32, 7, 3, 2, 0], 0u64), 32)

