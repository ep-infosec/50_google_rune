//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class A(self) {
  final(self) {
    println "Destroying A ", <u32>self
  }
}

class B(self, a: A, cost) {
  self.cost = cost
  a.pushB(self)
  final(self) {
    println "Destroying B ", <u32>self
  }

  operator < (b1: B, b2: B) {
    return b1.cost < b2.cost
  }
}

class C(self, a: A, cost) {
  self.cost = cost
  a.pushC(self)
  final(self) {
    println "Destroying C ", <u32>self
  }

  operator > (c1: C, c2: C) {
    return c1.cost > c2.cost
  }
}

relation HeapqList A B cascade
relation HeapqList A C cascade (false)

list = [83, 1, 8, 123, 929, 33, 0, 10]
a = A()
for i in range(list.length()) {
  B(a, list[i])
  C(a, list[i])
}
do {
  b = a.popB()
} while !isnull(b) {
  println "popped B ", b.cost
  b.destroy()
}
do {
  c = a.popC()
} while !isnull(c) {
  println "popped C ", c.cost
  c.destroy()
}
for i in range(list.length()) {
  B(a, list[i])
}
a = null(a)
