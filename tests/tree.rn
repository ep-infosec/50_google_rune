//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Polymorphic in that label can be different types.
class Tree(self, label: string, child1 = null(self), child2 = null(self)) {
  self.label = label
  if !isnull(child1) {
    self.appendTree(child1)
  }
  if !isnull(child2) {
    self.appendTree(child2)
  }
  func dump(self) {
    self.dumpRec(0)
  }

  func dumpRec(self, depth) {
    left = self.firstTree
    right = null(self)
    if !isnull(left) {
      right = left.nextTreeTree
    }
    if !isnull(left) {
      left.dumpRec(depth + 1)
    }
    indent(depth)
    println self.label
    if !isnull(right) {
      right.dumpRec(depth + 1)
    }
  }
}

relation DoublyLinked Tree Tree cascade

func indent(depth) {
  for i = 0, i < depth, i += 1 {
    print "    "
  }
}

unittest treeTest {
  n1 = Tree("N1", Tree("L1"), Tree("L2"))
  n2 = Tree("N2", Tree("L3"), Tree("L4"))
  n3 = Tree("N3", n1, n2)
  n4 = Tree("N4", Tree("L5"))
  root = Tree("root", n3, n4)
  root.dump()
}
