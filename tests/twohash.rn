//  Copyright 2022 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Graph(self) {
  func dump(self) {
    for node in self.nodes() {
      node.dump()
    }
  }
}

class Node(self, graph, id: u64) {
  self.id = id
  graph.appendNode(self)

  func dump(self) {
    print "n%u ->" % self.id
    for edge in self.outEdges() {
      print " n", edge.toNode.id
    }
    println
  }

}

class Edge(self, fromNode, toNode) {
  self.hash = hashValues(fromNode.id, toNode.id)
  fromNode.graph.insertEdge(self)
  fromNode.insertOutEdge(self)
  toNode.insertInEdge(self)
}

relation DoublyLinked Graph Node cascade
relation Hashed Graph Edge cascade
relation Hashed Node:"from" Edge:"out" cascade
relation Hashed Node:"to" Edge:"in" cascade

graph = Graph()
n1 = Node(graph, 1)
n2 = Node(graph, 2)
n3 = Node(graph, 3)
e1 = Edge(n1, n2)
e2 = Edge(n2, n3)
e3 = Edge(n2, n1)
graph.dump()
// Test that we can find the edge from its two node ids.
assert graph.findEdge(hashValues(2, 3)) == e2
// Test the safe hashed iterator, where the child can be destroyed in the loop.
for edge in n2.safeOutEdges() {
  edge.destroy()
}
println "After destroying n2's out edges:"
graph.dump()
